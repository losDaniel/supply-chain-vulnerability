# -*- coding: utf-8 -*-
"""
The gov issues and allocates ID numbers to specific farmers at the beginning 
of a fiscal year by estimating the number of ID tags each farmer will need in 
the year to reduce time lags between cattle birth and tag attachment.

Some ID beginning with “0” were assigned to cattle for model projects 
(proof-of-concept).

"""

import pandas as pd 
import itertools


def realistic_random_ids():
    '''Creates a set of random IDs based on the first 5 digits of the IDs that have been collected (starting with "1" for active IDs) and every available set of the next four digits'''

    data = pd.read_csv('G:/My Drive/Supply Chain Vulnerability/supply-chain-vulnerability/data/collected/final_collected_save.csv', dtype={'個体識別番号':'O','id0':'O','id1':'O','id2':'O'})

    data['id0'] = data['個体識別番号'].astype(str).str[0:5]
    data['id1'] = data['個体識別番号'].astype(str).str[5:9]

    data['active_ids'] = data['個体識別番号'].astype(str).str[0]
    data['active_ids'] = data['active_ids'].apply(lambda x: 1 if x == '1' else 0)
    active_data = data[data['active_ids']==1]

    # Use the examples of the first and second parts of the IDs
    unique_0_ids = list(active_data['id0'].unique())
    unique_1_ids = list(active_data['id1'].unique())

    # Create all pairwise combinations of these 
    ID_combinations = list(itertools.product(unique_0_ids, unique_1_ids))
    random_ids = [str(i[0])+str(i[1])+str(get_last_digit(str(i[0] + i[1]))) for i in ID_combinations]

    setA = set(random_ids)
    setB = set(list(data['個体識別番号'].values))

    new_random_ids = setA.difference(setB)

    return list(new_random_ids) 


def get_last_digit(ids: str):
    '''The last digit in the ID number for the cattle is calculated base don the first nine digits as a confirmation. We have replicated the formula used here'''
    odd_nums = []
    even_nums = [] 
    odd=True 
    for i in ids: 
        if odd: 
            odd_nums.append(int(i))
            odd=False
        else:
            even_nums.append(int(i))
            odd=True

    import numpy as np

    odd_sum = np.sum(np.array(odd_nums))
    even_sum = np.sum(np.array(even_nums))

    rem = ((odd_sum*3)+even_sum)%10
    last_digit = 10-rem

    if last_digit == 10: 
        last_digit=0

    return last_digit 

