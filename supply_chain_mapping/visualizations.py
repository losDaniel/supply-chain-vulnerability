import os
from path import Path 
root = str(Path(os.path.abspath(os.path.dirname(__file__))).parent)

import plotly.graph_objects as go
import plotly.express as px

import supply_chain_mapping.data_cleaning_and_processing as dc

import  numpy  as  np
from  japanmap  import  picture

import  matplotlib.pyplot  as  plt 
from  pylab  import  rcParams


def plot_scraper_entropy(factor, complete_data):
    
    num_edges, num_nodes, num_ids = dc._get_scraper_entropy_data(factor, complete_data)
    # Create traces
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=num_ids, y=num_edges,
                        mode='lines',
                        name='# edges'))
    fig.add_trace(go.Scatter(x=num_ids, y=num_nodes,
                        mode='lines',
                        name='# nodes'))
    
    fig.update_layout(title='Number of Edges & Nodes by IDs Scraped')
    
    fig.show()


def _plot_on_map(summary, slaughter_summary):
    '''Plot data on the map'''
    japan_summary = summary[["PrefJ","node","Prefecture"]].merge(slaughter_summary, on='Prefecture', how='inner')
    
    
    japan_summary['Cow_P'] = japan_summary['#Cows']/japan_summary['#Cows'].sum()
    
    perf_list = japan_summary['PrefJ'].values
    rate = japan_summary['Cow_P'].values
    rf = rate.astype(np.float32)

    def color_scale(r): 
        return(0, int(255 - 255/np.max(rf) * r), 255)
    
    data = {} 
    for p, r in zip(perf_list, rf): 
        c  =  color_scale(r) 
        data[p] = c
    
    rcParams['figure.figsize'] = 14, 14 
    plt.imshow(picture (data));

def plot_ids_by_prefecture(summary, title='Scraped IDs by Prefecture',y='node',x='Prefecture',text='#Cows'):
    '''Plots a bar graph showing the number of cows that started their grim journey in each prefecture'''
    fig = px.bar(summary, y=y, x=x, text=text)
    fig.update_traces(texttemplate='%{text:.2s}', textposition='outside')
    fig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide', title=title)
    fig.show()
    
    
def plot_nodes_ids_by_prefecture(summary, title='# of Nodes & Cows by Prefecture'):    
    '''Plots a double bar graph with number of '''
    x = summary['Prefecture'].values
    y1 = summary['node'].values
    y2 = summary['#Cows'].values
    
    fig = go.Figure()
    fig.add_trace(go.Bar(
        x=x,
        y=y1,
        name='Nodes',
        marker_color='indianred',
    ))
    fig.add_trace(go.Bar(
        x=x,
        y=y2,
        name='#Cows',
        marker_color='lightsalmon',
    ))
    
    # Here we modify the tickangle of the xaxis, resulting in rotated labels.
    fig.update_layout(barmode='group', xaxis_tickangle=-45, title=title)
    #fig.write_image(project_path+'/documents/# of Nodes & Cows by Prefecture', format='pdf', engine='kaleido')
    #fig.write_html(project_path+'/documents/# of Nodes & Cows by Prefecture.html')
    fig.show()


def remove_values_from_list(the_list, val):
    return [value for value in the_list if value != val]

    
def plot_degrees_out_in_directedG(g):

    out_d=list(dict(g.out_degree()).values())
    in_d=list(dict(g.in_degree()).values())
    
    ######NEED to eliminate ZEROS
    in_d=remove_values_from_list(in_d,0)
    out_d=remove_values_from_list(out_d,0)
    
    out_weighted=list(dict(g.out_degree(weight='weight')).values())
    in_weighted=list(dict(g.in_degree(weight='weight')).values())
    ######NEED to elkminate ZEROS
    out_weighted=remove_values_from_list(out_weighted,0)
    in_weighted=remove_values_from_list(in_weighted,0)
    
    fig, ax = plt.subplots()
    fig.set_size_inches((9, 7))
    
    n_bins = 20
    
    #n, bins = np.histogram(out_d, bins = range(min(out_d), max(out_d)+1, 2), normed="True") 
    out_logBins = np.logspace(np.log10(min(out_d)), np.log10(max(out_d)),num=n_bins)
    out_logBinDensity, out_binedges = np.histogram(out_d, bins=out_logBins, density=True)
    
    #n, bins = np.histogram(in_d, bins = range(min(in_d), max(in_d)+1, 2), normed="True") 
    in_logBins = np.logspace(np.log10(min(in_d)), np.log10(max(in_d)),num=n_bins)
    in_logBinDensity, in_binedges = np.histogram(in_d, bins=in_logBins, density=True)
    
    ax.loglog(out_logBins[:-1],out_logBinDensity,'o', markersize=10,label=r'$k_{in}$')
    ax.loglog(in_logBins[:-1],in_logBinDensity,'s', markersize=10,label=r'$k_{out}$')
    ax.legend(fontsize=30)
    
    
    ax.set_xlabel('$degree, k$',fontsize=40)
    ax.set_ylabel('$P(k)$',fontsize=40) 
    plt.savefig("distributions.eps",dpi=200,bbox_inches='tight')